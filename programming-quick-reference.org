#+STARTUP: indent

#+TOC: headlines 3
#+TOC: listings
#+TOC: tables

#+TITLE: Краткое руководство по написанию программ

* Введение

Здесь будет рассказано, как с помощью простого текстового редактора и
других программ написать новый текстовый редактор или другую
программу.

Любые совпадения с реальными фамилиями, именами, группами и другими
названиями просьба считать случайными и не пытаться их отражать в
своих действиях.

Критически относитесь к тексту: в нём гротеск искусно сочетается с
непреднамеренными ошибками.
#+BEGIN_COMMENT
преувеличения с издёвкой
#+END_COMMENT
Автор не несёт никакой ответственности и ничего не гарантирует.

* Приблизительная последовательность действий при написании программы

Почти все действия этого параграфа происходят в терминале (консоль) и
текстовом редакторе. Пункты необходимо выполнять последовательно.

** Печать

Обычные программы содержат достаточно много текста, и чтобы процесс
написания программы был слегка быстрее - желательно изучить слепой
десятипальцевый метод печати на клавиатуре. И хотя умение печатать не
критично, оно серьёзно позволяет не отвлекаться на поиск букв на
клавиатуре. Это примерно, как студенту подглядывать написание букв в
азбуке на Гос-Экзаменах - вряд ли он успеет много написать, даже при
хорошем знании материала билета.

Раскладка (расположение букв на клавишах клавиатуры) QWERTY была
изобретена не от хорошей жизни: в 1888 году молоточки первых печатных
машинок при быстром нажатии соседних клавиш зацеплялись друг за друга,
а печатающий механизм находился снизу и напечатанный текст можно было
увидеть, только провернув барабан. В раскладке QWERTY часто
используемые буквы находятся далеко друг от друга, чтобы печать не
вызывала зацепления молоточков. Побочный эффект - увеличение пробега
пальцев руки от одной буквы к другой и как следствие - уменьшение
скорости печати.

Уже через несколько лет данная проблема была решена.

В 1936 году появилась раскладка Dvorak, в которой самые часто
встречающиеся буквы находятся прямо под пальцами в среднем ряду
клавиатуры. В 2006 году появилась раскладка Colemak.

Однако, пользователи компьютеров (потребители) до сих пор (в момент
написания идёт 2014 год) думают, что молоточки задевают друг за друга
и выбирают клавиатуру с раскладкой QWERTY, хотя нет, потребители
совсем не думают: за них уже подумали эффективные менеджеры.

Нет ни одной разумной причины почему до сих пор не получили широкого
распространения нормальные раскладки на продаваемых клавиатурах.
Обычные потребители всё равно не умеют печатать - им нет никакой
разницы: искать каждую букву глазами на раскладке QWERTY и тыкать в
неё указательным пальцем или на клавиатуре с другой раскладкой искать
каждую букву глазами и тыкать в неё указательным пальцем. Для обычных
людей, скорее всего, была бы удобна раскладка повторяющая алфавит:
порядок ~30 букв они осилили в школе и могут повторить алфавит, не
глядя в букварь. С другой стороны, тем кто овладел непостижимым
искусством слепого десятипальцевого метода печати на клавиатуре нет
необходимости видеть надписи на клавиатуре - эти уникальные люди
невероятным мыслительным усилием смогли запомнить расположение ~30
клавиш и тыкают в них пальцами не глядя! Но все знают: невозможно
запомнить расположение ~30 клавиш - значит они подглядывают: очевидно,
что они шарлатаны и дурят народ.

#+BEGIN_COMMENT 
Если кто-нибудь говорит "все" ("всё") - это означает "почти никто"
("почти ничего") и наоборот.

Если вы слышите "это очевидно" - знайте объяснение займёт 20 страниц
мутных рассуждений.
#+END_COMMENT

Если вы всё-таки решите изучить слепой десятипальцевый метод печати на
клавиатуре, то это займёт примерно от одного дня до недели. Изучать
метод печати имеет смысл только, если регулярно печатаете, в противном
случае мышечная память постепенно выветривается: данный навык придётся
поддерживать.


** Название
Выбрать название проекта: каталог, а также имена файлов и все имена
переменных. Например, необходимо выполнить третье задание: написать
программу печатающую алфавит.

    - Можно воспользоваться программой генерирующей абракадабру
      например:
    #+BEGIN_SRC bash
pwgen -A -0
    #+END_SRC
    
    - Можно выбрать название самостоятельно, например: proj_3_abc,
      расшифровывается как проект программы по распечатке алфавита,
      цифра 3 обозначает номер задания.
      
    - Однако, не начинайте названия со знака "тире" или цифры.
      (3_proj_abc или -3_proj_abc)
      
    - Не используйте в названиях специальные символы, национальные
      алфавиты (русский) и транслитерацию - это может сильно
      затруднить работу и не только вам.
      (Мойа␣⋐⋓⋒⋹ℙ㝉программ ⏎ №Ⓣ®☋ "a/\cpaBu〠")
      
      
Рекомендуемые варианты написания сложных названий:
    
    - Слитное написание: proj3abc -
      нерекомендуетсяпопричинетрудночитаемоститаких конструкций
      
    - CamelCase: Proj3Abc либо proj3Abc (ВНекоторыхЯзыкахПриняты
      РазныеВариантыНаписания дляПеременныхИФункций)
      
    - snake-case (используя_в_качестве_разделителя_подчёркивание
      либо-тире): proj_3_abc
      
    - Венгерская нотация - использование префиксов (s - string, i -
      int, b - boolean, a - array, us - небезопасные, sf -
      безопасные): susClientName, iusSize, aisfDimensions, однако
      компилятор в "нормальных языках" и так знает типы в том числе и
      пользовательские, и может их проверить.
      
    - Смешанное: Proj_3_Abc или PROJ_3_ABC
      
      
    
#+BEGIN_COMMENT
Which is better: identifier names that_look_like_this or
identifier names thatLookLikeThis?

It's a precedent thing. If you have a Pascal or Smalltalk
background, youProbablySquashNamesTogether like this. If you have
an Ada background, You_Probably_Use_A_Large_Number_Of_Underscores
like this. If you have a Microsoft Windows background, you
probably prefer the "Hungarian" style which means you jkuidsPrefix
vndskaIdentifiers ncqWith ksldjfTheir nmdsadType. And then there
are the folks with a Unix C background, who abbr evthng n use vry
srt idntfr nms. (AND THE FORTRN PRGMRS LIMIT EVRYTH TO SIX
LETTRS.)

CamelCase настолько читаем, что в Emacs даже есть специальный
режим: glasses minor mode makes ‘unreadableIdentifiersLikeThis’
readable by altering the way they display.
#+END_COMMENT
    

    
    
заранее подумайте, что правильнее для инструкции:
    
    - чай_пей (объект_метод или другими словами объект_действие)
    - пей_чай (наоборот: действие_объект или другими словами
      _глагол-действие_, а после него идет _субъект_действия_)



#+BEGIN_COMMENT 
чай_пей (объект_метод или другими словами объект_действие)

php

пей_чай (наоборот: действие_объект или другими словами
_глагол-действие_, а после него идет _субъект_действия_)

perl, php


заметьте php встречается и тут и там:
[[https://nuclight.livejournal.com/107170.html]]
[[http://habrahabr.ru/post/142140/]]
#+END_COMMENT
    



Выбор варианта стиля:
    
    - работа в команде - команда выберет стиль за вас.
    - продолжение работы над уже существующим проектом - предыдущий
      автор уже выбрал стиль за вас.
    - ВЯзыкеПрограммированияИспользуется ОпРеДеЛёНнЫйСтИлЬ -
      язык_программирования_выберет стиль-за-вас.
    - в остальных случаях выбор стиля за вами. Да.
      
      
Выбранный вариант, желательно, использовать не только для
каталогов, но и для названий файлов, а также во всей программе для
функций, переменных и прочего.
    
    
** Создание каталога
Это необходимо сделать только один раз перед началом нового проекта
(программы). Каждый проект хранится в отдельном каталоге. Каталог
проекта будет содержать исходный код программы, исполняемые файлы,
руководство пользователя и другие файлы необходимые для работы
программы.

пример:

#+BEGIN_SRC bash
mkdir -p 21119/petroff/proj_3_abc
#+END_SRC
где 
    - /21119/ - номер группы,
    - /petroff/ - фамилия,
    - /proj_3_abc/ - название проекта.
      
      
    
** Перейти в каталог проекта

#+BEGIN_SRC bash
cd 21119/petroff/proj_3_abc
#+END_SRC


** Текстовый редактор
запустить любимый текстовый редактор, например: emacs, vim(gvim),
mc(mcedit), gedit.

#+BEGIN_COMMENT
По моему мнению при изучении низкоуровневых языков (паскаль создавался
как подготовка к языку C, а язык C по мнению самих авторов языка C -
переносимый ассемблер), чтобы написать "Hello world!", не стоит
использовать "Интегрированные среды разработки" (IDE). Потому, что
помимо самого языка придётся изучать IDE, которые порой ещё более
запутанные, чем изучаемый язык программирования. В большинстве
текстовых редакторов есть подсветка синтаксиса и парных скобок,
автодополнение или сниппеты, автоматическое выравнивание кода, а
компилировать можно в терминале (хотя некоторые редакторы позволяют
компилировать по команде), всего этого в начале изучения
программирования должно хватить. В дальнейшем, скорее всего, студент
не будет работать в паскале: на третьем курсе начинают изучать язык C
и к тому времени студент уже сам сможет выбрать IDE, а изучение
Lazarus-а или Delphi (паскалевские IDE) окажется почти напрасным.
#+END_COMMENT

Запускать не обязательно из терминала, можно из "Меню программ":
Системные или Разработка, а может быть Инструменты э-э-э-э нет
всё-таки Прочее, если тоже не обнаружилось, то наверное пропустили в
Системных > Простой редактор текстов > [уже в простом редакторе
текстов] Файл > Открыть > найти и выбрать двойным щелчком 21119 >
найти и выбрать двойным щелчком petroff > найти и выбрать двойным
щелчком proj_3_abc > найти и выбрать двойным щелчком abc3.pas.  Хотя
некоторые могут заметить, что в терминале подобное уже было сделано
командой cd 21119/petroff/proj_3_abc, но терминал нам потребуется
запускать для ручной компиляции. А другие знают про Alt-F2.

а в терминале:
#+BEGIN_SRC bash
emacs abc3.pas &
#+END_SRC
где
    - /emacs/ - текстовый редактор: vim, mcedit, gedit,
      
    - /abc3.pas/ - название программы - должно быть связано с
      названием проекта и вместо ~abc3.pas~ желательно использовать
      ~proj_3_abc.pas~,
      
    - /&/ - (амперсанд) - интерпретатор (bash) не дожидается
      завершения команды, выполнение программы (emacs) происходит в
      фоновом режиме (в терминале можно вводить команды, не
      останавливая emacs)
      
      
** Написание программы
#+NAME: write_program

В текстовом редакторе самостоятельно написать хорошую, правильную
программу. После написания программы не закрывайте текстовый редактор!


Правильная программа предполагает хорошее оформление. Прочитать
обязательно: [[http://zed.karelia.ru/go.to/for.students/coding.rules/rules][как НУЖНО оформлять исходные тексты программ]].




Для упрощения процесса написания программы (на примере emacs):

    - используйте табуляцию для отступов и автоматического
      выравнивания
      
    - после того как запомните однотипные базовые конструкции
      (например: program ... uses ... const ... var ... begin
      ... end.) - включите сниппеты (snippet).
      
      Например: в редакторе написали слово "program" и больше ничего,
      потом нажимаете "Tab" и появляется заготовка целого блока
      программы program ... uses ... const ... var ... begin ... end.
      
    - как можно чаще сохраняйте программу (в компьютерных классах
      старые компьютеры - возможны зависания)
      
    - за неделю с компьютером может случиться разное - например, на
      лабораторных по эксплуатации ЭВМ будут изучать файловые системы
      и случится может разное, поэтому в конце занятия сохраните свою
      программу, она вам ещё понадобится. Причём желательно
      одновременно сохранить на разные носители информации (и на
      компьютере, и на флэшку, и в интернете):
      
      + на флэшку, в каталог с датой и версией, например:
        2014-11-15-v1.2, а *перед тем как вытащить флэшку - ВСЕГДА
        отмонтируйте* файловую систему, независимо от операционной
        системы. Хотя, в случае autofs, отмонтирование происходит
        автоматически, если файловая система не используется
        определённое время, но в этом случае необходимо закрыть все
        программы связанные с флэшкой и подождать определённое время
        (уточнить в настройках autofs).
        
      + через интернет сервис [[http://pastebin.com/][http://pastebin.com/]] (возможно
        потребуется разрешить java скрипты - NoScript в правом верхнем
        углу перечёркнутая буква S: разрешить pastebin.com). Не
        устанавливайте время хранения "Paste Expiration" меньше, чем 2
        недели. После отправки, вам выдадут короткий код типа
        http://pastebin.com/cOcle, который аккуратно записываете
        повторяя все _маленькие_ и *БОЛЬШИЕ* буквы и цифры. Обратите
        внимание - в коде cOcle второй символ - цифра ноль, а третья и
        четвёртая буквы cl иногда сливаются в букву d, как и другие
        комбинации букв rnm, 1Il|, 0OОoо, ыЫbl, ...
	
      + через другой интернет сервис, например:
        [[https://gist.github.com/][https://gist.github.com/]] аналогично запишите выданный вам код
        в тетрадь.
	
      + можно отправить себе через электронную почту на свой почтовый
        ящик.
	
     - после того, как вдоволь насохраняетесь - обязательно узнайте,
       что такое "системы контроля версий [d]vcs" например: git.
       
     - к этому моменту вы уже либо превратите emacs/vim в IDE, либо
       найдёте IDE по своему вкусу, или забросите программирование.
       
      
** Сохранение
В текстовом редакторе: сохраните программу.
       
** Компиляция

компиляция программы компилятором (fpc) - процесс получения
исполняемого файла из исходных текстов программы. Для этого в
терминале:

#+BEGIN_SRC bash
fpc abc3.pas
#+END_SRC

где
    - /abc3.pas/ - название программы.
      
      
    
Однако, лучше использовать гламурную компиляцию. Для этого нужно в
терминале ввести команду (не забудьте написать команду в одну
строчку, а также поменять типографские кавычки на одинарные
кавычки, если это необходимо)

#+BEGIN_SRC bash
function fpcc() { fpc "$1" 2>&1 | grep -Ei --color 'error|fatal|warning|note|'; }
#+END_SRC
    
    
    
и запускать
#+BEGIN_SRC bash
fpcc abc3.pas
#+END_SRC
    
    
#+BEGIN_COMMENT
http://www.linux.org.ru/forum/development/4184158
http://creativecommons.org/licenses/
http://legroom.net/2009/08/18/bash-shell-aliases-and-functions
#+END_COMMENT
    
или можно создать файл ~/bin/fpcc.sh с таким содержимым:
    
#+BEGIN_SRC bash
#!/bin/sh
fpc $1 2>&1 | grep -Ei --color 'error|fatal|warning|note|'
#+END_SRC
    
    
    
тогда запускать 
#+BEGIN_SRC bash
~/bin/fpcc.sh abc2.pas
#+END_SRC
    
    
    
    
    
    
** Сообщения компилятора
Внимательно прочитать сообщения компилятора. При наличии ошибок или
предупреждений перейти к [[write_program][пункту про написание программы]] (о сообщениях
компилятора см. ниже)

** Запуск программы

#+BEGIN_SRC bash
./abc3
#+END_SRC

где
    - ./ - текущий каталог,
    - /abc3/ - название исполняемого файла (без расширения ".pas").
      
      
    
** Проверка
если программа получилась негодной, перейти к [[write_program][пункту про написание
программы]]

** График 
если для демонстрации программы необходимо построить график, то нет
никакой необходимости строить график из паскаля. Воспользуйтесь
программами для построения графиков: для этого получите текстовый файл
с несколькими колонками разделёнными запятыми (без лишних сообщений).
#+BEGIN_SRC fundamental
x1, y11, y12, y13
x2, y21, y22, y23
x3, y31, y32, y33
...
#+END_SRC


*** Двумерный график

#+BEGIN_SRC pascal
program abc5;

uses math;

const
        step : real = 1.0e-1;
        start : real = 0.0;
        finish : real = 5.0;

var 
        current : real;



begin
        current := start;
        repeat
                writeln(current, ', ', sin(current*10)/current);
                current := current + step;
        until (current > finish);
end.
#+END_SRC



запускайте с перенаправлением стандартного вывода внутрь файла:

#+BEGIN_SRC bash
./abc5 > data.txt
#+END_SRC


в zsh, если файл data.txt уже есть, запускаем так:
#+BEGIN_SRC bash
./abc5 >! data.txt
#+END_SRC




для построения графика можно воспользоваться программой R или gnuplot
(в них можно строить даже трёхмерные поверхности)

    - R: запускаем в терминале
#+BEGIN_SRC bash
R
#+END_SRC
    
#+BEGIN_SRC R
gr <- read.table("data.txt", sep=",", head=FALSE)
plot(gr, type="l")
#+END_SRC
    
    - gnuplot: запускаем в терминале 
#+BEGIN_SRC bash
gnuplot
#+END_SRC
    
#+BEGIN_SRC gnuplot
plot "data.txt" with line
#+END_SRC


выход "Ctrl + d"
    
    
    
*** Плоское изображение

Программа математического моделирования распределения электрического
поля в пространстве между уголками.

Недостатки программы:
- Расчёт не корректный из-за небольшого сдвига при чтении и записи в
  один и тот же массив.
- Отсутствует полёт электрона.
- Процедуры (и отсутствующие функции) используются без параметров:
  тотальное использование глобальных переменных делает программу не
  модульной.

#+BEGIN_SRC pascal
program modelir;

const
        dim = 100;
        num_of_cycles = 10000;
        
var
        arr : array [1..dim, 1..dim] of double;
        i, j :integer;
        k :integer;
        


procedure border; 
var
        i, j : integer;

begin        
        {
        update border of model image (array)
        
        -----------------   100 V
        |        
        |
        |         -------   0 V
        |         |
        |         |
        
        }

        for i := 1 to dim do
                for j := 1 to dim do begin
                        if (i=1) then arr[i, j] := 100.0;
                        if (j=1) then arr[i, j] := 100.0;
                        if ((i>round(dim/8)) and (j>round(dim/2))) then arr[i, j] := 0.0;
                        {if (sqr(i-dim/4) + sqr(j-dim/3) < sqr(5)) then arr[i, j] := 50.0;}
                end;
        
end;



procedure calc_field; 
var
        i, j : integer;

begin
        // calculate electrical field
        for i := 2 to dim-1 do
                for j := 2 to dim-1 do
                        arr[i,j] := (arr[i+1,j]+arr[i-1,j]+arr[i,j+1]+arr[i,j-1])/4.0; // simple average of near element
        
        for i := 1 to dim do begin
                // care for element near border
                arr[i,1] := arr[i, 2];
                arr[i,dim] := arr[i, dim-1];
                arr[1,i] := arr[2, i];
                arr[dim,i] := arr[dim-1, i];
        end;
end;



begin
        border;

        for k:=1 to num_of_cycles do begin
                border;
                calc_field;
        end;
        
        border;

        for i := 1 to dim do begin
                for j := 1 to dim do
                        write(arr[i,j]:7:3, ' ');
                writeln;
        end;
end.
#+END_SRC


откомпилировть, выполнить с перенаправлением вывода в файл и построить
график
#+BEGIN_SRC bash
fpc modelir.pas
./modelir > model.dat
gnuplot -e "plot 'model.dat'  matrix with image ; pause -1 \"press enter\""
#+END_SRC

*** 3D изображение
Если кому-то посчастливится строить трёхмерное изображение, то можно
начать с примера:

#+BEGIN_SRC pascal
program test_3d;

uses math;

const
        step : real = 1.0e-3;
        start : real = -10.0;
        finish : real = 30.0;

var 
        x, y, z : real;
        param : real;


begin
        param := start;
        repeat
                writeln(param*cos(param), ', ', param*sin(param), ', ', param);
                param := param + step;
        until (param > finish);
end.
#+END_SRC


откомпилировать, и в терминале:

#+BEGIN_SRC bash
./test_3d >! 3d.dat; gnuplot -e "splot '3d.dat' with lines ; pause -1 \"press enter\""
#+END_SRC





* Сообщения компилятора
Компилятор показывает сообщения об ошибках с номером строки и номером
символа в круглых скобках.  Например (6,4) - ошибка в строке 6, номер
символа 4. Чтобы найти ошибку не нужно отсчитывать в текстовом
редакторе строчки: просто взгляните на строку состояния (обычно
внизу).

Однако, например, если отсутствует *;* (точка с запятой) в конце
оператора, то компилятор укажет на следующую строку (пропущенную точку
с запятой, скорее всего, нужно добавить строкой выше).

Если вы воспользовались гламурной компиляцией [[fpc]], то ключевые слова
будут подсвечены цветом.

Если в процессе компиляции появляются сообщения со словами "error" или
"fatal", то в программе присутствует ошибка, которую необходимо
исправить. Например, ошибки синтаксиса и операции с несовместимыми
типами данных:


#+BEGIN_SRC bash
abc3.pas(6,4) Fatal: Syntax error, "." expected but ";" found
abc3.pas(7,4) Error: Incompatible types: got "String" expected "Real"
abc3.pas(10) Fatal: There were 1 errors compiling module, stopping
Fatal: Compilation aborted
#+END_SRC



Если в процессе компиляции появляются сообщения со словами "warning"
или "note", то в программе присутствует недостаток, котоый желательно
исправить. Например, неиспользуемая переменная и неинициализированная
переменная (объявили переменную, в неё ничего не записали, попытались
вывести её значение на экран):

#+BEGIN_SRC bash
abc3.pas(3,7) Note: Local variable "c" not used
abc3.pas(10,16) Warning: Variable "b" does not seem to be initialized
#+END_SRC



Успешно откомпилированная программа должна содержать примерно такую
строку:

#+BEGIN_SRC bash
10 lines compiled, 0.1 sec
#+END_SRC





* Отчёт по программе

1. Формулировка задания, а также расшифровка - как вы поняли смысл
   задания.
2. Словесно-формульный алгоритм. Описать, как работает алгоритм и
   рассмотреть сложные моменты.
3. Блок-схема. Громадный рисунок с кружочками, стрелочками и
   многоугольниками. Можно по старинке на бумаге. Для создания на
   компьютере вручную - можно воспользоваться программой dia, tikZ или
   graphwiz. Для генерации автоматически - doxygen.
   #+BEGIN_COMMENT
   Когда от "ГОСТа19.701 90" выработается стойкое отвращение
   #+END_COMMENT
   Почитайте про UML.
4. Программа. Продемонстрировать исходный код программы.
5. Руководство пользователя. Как запустить программу, что нужно
   вводить и как получить результат.
6. Проверка. Если в программе вычисляется квадратный корень от (1/x),
   то нужно проверить как работает программа при x=0.0; x=-9.0 и при
   обычных числах например x=25.0
7. Улучшения. Большинство программ можно улучшить. Необходимо описать
   возможные изменения, например:
   
   в программе присутствует ввод целого числа, но пользователь может
   ввести:
   
   - "пять" буквами
   - " 5" (пробел 5 [это допустимо, но зачем?])
   - "=5"
   - "5O" (буква O очень похожа на цифру 0)
   - "5,4" (вместо 5.4 если спрашивают число с плавающей запятой).
     
   Всё это можно исправить, если создать функцию, например: "readint",
   которая будет запрашивать ввод данных в виде строки, предварительно
   обрабатывать их в целочисленный тип (например, с помощью val), а в
   случае некорректного "числа" запрашивать ввод повторно.
8. Лицензия. Указать название лицензии.
   - /BSD/ Свободное программное обеспечение. Делайте с программой что
     хотите: запускайте, изучайте, копируйте, изменяйте,
     распространяйте, продавайте. Но оставьте информацию об авторе и о
     том, что автор не несёт никакой ответственности и ничего не
     гарантирует.
   - /GNU GPL/ Свободное программное обеспечение. Делайте с программой
     что хотите: запускайте, изучайте, копируйте, изменяйте,
     распространяйте, продавайте. Но оставьте информацию об авторе и о
     том, что автор не несёт никакой ответственности и ничего не
     гарантирует. Также сохраните лицензию GPL на программу и её
     реинкарнации (форки).
   - /EULA/ (проприетарное лицензионное соглашение с конечным
     пользователем) - договор между владельцем (автором) компьютерной
     программы и +рабом+ пользователем её копии. В случае EULA,
     необходимо привести полный текст лицензии:
     
     Студенту, желающему сдать работу и выбравшему в качестве лицензии
     EULA, требуется написать конечное соглашение пользователя в
     котором для примера, но не для бездумного копирования,
     используется в качестве основы следующее описание: в котором
     описываются ограничения включающие, но не ограничивающиеся,
     запрещением просмотра исходного кода и его изучения (только под
     NDA - соглашение о неразглашении продажи бессмертной души),
     запрещение распространения, запрещение несанкционированного и
     несогласованного с высшим руководством запуска программы,
     запрещение продажи без покупки дистрибьюторских прав, банальные
     зонды и прочие соглашения почти не нарушающие конституцию и права
     человека, если будет доказано, что пользователь действительно и
     неоспоримо на момент заключения договора и в течении всего
     времени на которое распространяется действие договора, являлся
     человеком, причём без возможности получения прямой либо косвенной
     выгоды, в том числе либо материальной либо нематериальной выгоды,
     включая использование данного соглашения без изменения его сути и
     содержания, ограничиваясь только 10 (десятью) страницами мелкого,
     трудно читаемого текста.
     
     


* Список литературы
   - Жиганов Е.Д.
     [[http://zed.karelia.ru/go.to/for.students/coding.rules/rules][/Студентам/Оформление программ/Правила]] Как НУЖНО
     оформлять исходные тексты программ
     
     
   
   
   
   
   
   
   
* Авторство
Copyright (C) 2014 Roman V. Prikhodchenko

Author: Roman V. Prikhodchenko [[chujoii@gmail.com]]

* Лицензия

[[CC_BY-SA_88x31.png]]

Руководство распространяется в соответствии с условиями
[[http://creativecommons.org/licenses/by-sa/3.0/][Attribution-ShareAlike]] (Атрибуция — С сохранением условий) CC BY-SA.
Копирование и распространение приветствуется.
