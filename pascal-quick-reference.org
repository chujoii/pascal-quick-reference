#+STARTUP: indent
#+TITLE: Краткое руководство по языку программирования Pascal

Совсем краткое изложение можно прочитать здесь: [[http://edunow.su/site/content/pascal/pascal_shpargalka][Шпаргалка по языку
Pascal]].



* Паскаль

примерный вид очень простой программы:

#+BEGIN_SRC pascal
program abc3;          // название программы

var                    // описание переменных
                       // переменная - по сути именованный ящичек
        s : string;    // "s" будет хранить в себе строку символов
        a : integer;   // "a" будет хранить в себе целое число



begin                  // начало программы
                       // далее идёт "тело" программы
        a := 5;        // присвоить переменной "a" значение 5
        readln(s);     // запросить у пользователя несколько символов
                       // и положить их в переменную s
        writeln(s, a); // напечатать переменные s и a
   
end.                   // конец программы - end с точкой
#+END_SRC



В некоторых случаях паскаль выглядит нелогично:
~readln(s);~
вместо
~s := readln();~
смиритесь.



** Ключевые слова
Ключевые слова недопустимо использовать для названия переменных,
констант, процедур и функций. Список ключевых слов:

absolute, and, array, asm, begin, boolean, break, case, char,
const, continue, div, do, downto, else, end, for, function, goto,
if, implementation, in, interrupt, is, label, mod, not, or, org,
otherwise, print, procedure, program, read, real, record, repeat,
shl, shr, step, string, then, to, type, unit, until, uses, var,
while, with, xor


** Комментарии
Текст, заключённый между фигурными скобками - комментарии к программе.

Пример:
#+BEGIN_SRC pascal
{
        Место для многострочного
        комментария
}
#+END_SRC


или так (не поддерживается старыми компиляторами):
#+BEGIN_SRC pascal
/*
        Место для многострочного
        комментария
*/
#+END_SRC


текст после двух слэшей также является комментарием
#+BEGIN_SRC pascal
// однострочный комментарий
#+END_SRC

Комментарии могут быть написаны:
- на вашем родном языке (если программа разрабатывается только для
  себя)
- на международном языке (если предполагаете распространение
  программы)
- ни в коем случае не используйте транслит.
     
     
   
** Типы данных
- real числа с плавающей запятой ±1.17549435082 * 10^{-38}
  .. ±6.80564774407 * 10^{38}
- integer целые -32768 .. 32767
- char символьный
- boolean логический
- перечисления
  
пример:

#+BEGIN_SRC pascal

var     // объявление переменных
        r: Real;    // переменная вещественного типа
        i: Integer; // переменная целого типа
        c: Char;    // переменная - символ
        b: Boolean; // логическая переменная
        s: String;  // переменная строка
        t: Text;    // переменная для обьявления текстового файла

        e: (apple, banana, orange, lemon); // перечисление
        x: 1..10;    // переменная типа - перечисления
        y: 'a'..'z'; // переменная типа - перечисления

        set1: set of 1..10;    // множество
        set2: set of 'a'..'z'; // множество

        r = record  // определение записи
                x: integer;
                y: char;
        end;        // странное окончание end без begin

        f = Text;   // определение файла
    
#+END_SRC
   
   
   
** Блок (Составной оператор)

Блок используется, если можно использовать только один оператор,
а хочется несколько (как скобки (в математике)). Блок
ограничивается ключевыми словами begin и end.

Например:

#+BEGIN_SRC pascal
if (a > b) then
        оператор1;
else
        оператор2;
#+END_SRC


вместо оператор1 (или оператор2) может быть только один оператор, но
часто нужно выполнить несколько.

#+BEGIN_SRC pascal
if (a > b) then begin
        оператор3;
        оператор4;
        оператор5;
end else
        оператор2;
#+END_SRC



причём, крайне желательно даже одиночные операторы в командах if,
while, for обрамлять блоком begin...end:

#+BEGIN_SRC pascal
if (a > b) then begin
        оператор3;
        оператор4;
        оператор5;
end else begin
        оператор2;
end;
#+END_SRC





** Операторы управления выполнением программы

#+BEGIN_SRC pascal
if (a > b) then  // условный оператор
        writeln('Условие выполнилось')
else             // иначе - секция может отсутствовать
        writeln('Условие не выполнилось');



case i of  // условный оператор множественного выбора
        0: write('ноль');
        1: write('один');
        2: write('два')
        else write('неизвестное число') // секция - иначе
                                        // может отсутствовать
end;       // окончание case
           // один из случаев, когда нет begin, но есть end
#+END_SRC


Для множественных условий лучше использовать оператор ~case~ вместо
пачки вложенных ~if~, потому, что компилятор в большинстве случаев
создаст более оптимальный код.

*** Операторы сравнения
- /</  меньше
- />/  больше
- /<=/ меньше или равно
- />=/ больше или равно
- /=/  равно
- /<>/ не равно

*** логические операторы
- /or/  или
- /and/ и
- /not/ не

*** Вероятные ошибки

**** сравнение и присваивание
На 3 курсе вам скажут, что язык паскаль не нужен и обучат
языку "C".

| значение     | pascal | C    |
|--------------+--------+------|
| сравнение    | ~=~    | ~==~ |
| присваивание | ~:=~   | ~=~  |


Привычка к записи знаков равенства и сравнения останется и
возникнут странные логические ошибки - программа будет работать, но
очень странно.

Нежелательно делать так (в паскале всё это правильно, а в языке C
неявная ошибка и компилятор в случае ~gcc -Wall -Werror ...~ выдаст
всего лишь предупреждение):

#+BEGIN_SRC pascal
if (b=5) then ...
#+END_SRC


Лучше так (в паскале всё правильно, при использовании данной
записи ошибка в языке C будет явной и компилятор выругает вас):
#+BEGIN_SRC pascal
if (5=b) then ...
#+END_SRC

Итог: любой из вариантов записи в языке паскаль верен и не является
ошибкой. Но привычки и *невнимательность* к предупреждениям компилятора
могут подвести при изучении языка C.

**** Сравнение плавающих чисел
Некорректно использовать знак равенства для сравнения чисел с
плавающей запятой.

#+BEGIN_COMMENT
#+BEGIN_SRC pascal
program abc5;

var 
        a : real;
        b : real;



begin
        a:=7.0;
        b:=1.0-((1.0/3.0)*(a-1.0)/2.0); 
        if (b=0.0) then
                writeln('zero')
        else
                writeln ('no zero');
        writeln(b);
end.
#+END_SRC


#+BEGIN_SRC pascal
program abc5;

const epsilon : real = 1.0e-10;

var 
        a : real;
        b : real;



begin
        a:=7.0;
        b:=1.0-((1.0/3.0)*(a-1.0)/2.0); 
        if (b < epsilon) then
                writeln('zero')
        else
                writeln ('no zero');
        writeln(b);
end.
#+END_SRC
#+END_COMMENT




#+BEGIN_SRC pascal
const
        epsilon : real = 1.0e-10;

var 
        a : real;
        b : real;



begin
        \\ вместо некорректного
        if(a=b) then ...


        \\ используйте
        if (abs(a-b) < epsilon) then ...
        \\ или если хочется странного
        if (abs(a-b) < epsilon * (abs(a)+abs(b))) then ...
#+END_SRC

где
- /epsilon/ нужно выбирать исходя из числа разрядов, а также сложности
  и количества выполняемых действий. Например: есть резисторы r1=5±1Ω,
  r2=7±2Ω. Вычислите погрешность сопротивления при параллельном
  соединении резисторов по двум, казалось бы, одинаковым формулам
  r=1/((1/r1)+(1/r2)) и r=r1*r2/(r1+r2)
      
      
** Циклы

#+BEGIN_SRC pascal
// в этих примерах переменная i - счётчик цикла
max_n := 5;



writeln ('итерационный цикл с заранее известным числом шагов:');
for i := 1 to max_n do begin
        writeln ('i=', i);
        // i = random(max_n); // плохо
        // внутри цикла for некорректно менять счётчик (i)
        // max_n = random(12354); // плохо
        // внутри цикла for некорректно менять предел цикла (max_n)
end;
// writeln (i);  // плохо
// пользоваться счётчиком (i) после цикла не корректно
writeln (); // перевод строки



writeln ('цикл с предусловием:');
i:=1; // необходимо перед циклом задать начальное значение счётчика
while (i <= max_n) do begin
        writeln ('i=', i);
        i := i + 1;     // меняем условие завершения цикла (i <= max_n): в данном случае счётчик (i)
end;
writeln (); // перевод строки



writeln ('цикл с постусловием:');   
i:=1; // необходимо перед циклом задать начальное значение счётчика
repeat  // begin...end необязателен
        writeln ('i=', i);
        i := i + 1;    // меняем условие завершения цикла (i <= max_n): в данном случае счётчик (i)
until (i > max_n);
writeln (); // перевод строки
#+END_SRC


В результате работы на экран будут выведены числа 1, 2, 3, 4, 5 в столбик.

** Процедуры и функции
Процедуры отличаются от функций тем, что функции возвращают какое-либо
значение, а процедуры — нет.

#+BEGIN_SRC pascal
program abc5;

var
        i : integer;



function next(k: integer): integer;
begin
        next := k + 1
end;


 
begin
        i := 1;
        writeln(next(i));
end.
#+END_SRC


** Множества

#+BEGIN_SRC pascal
program set;

var
        d : set of char;
        c : char;
        i : integer;

begin
        d := ['a', 'b', 'c', 'f'];
        c := 'e';
        if c in d then
                writeln(c, ' принадлежит множеству')
        else
                writeln(c, ' не принадлежит множеству');

        
        i := 7;
        if i in [5..10] then
                writeln(i, 'принадлежит множеству');
        else
                writeln(i, 'не принадлежит множеству');
end.
#+END_SRC











** Шаблон программы





#+BEGIN_SRC pascal
/*
        proj_3_abc.pas -- Одна строчка для названия программы и краткого описания того, что программа делает.
        Copyright (C) <год первого опубликования произведения> <имя автора>

        License: <название лицензии или текст лицензии>
*/

program abc3;

uses math;        // подключение модулей

const             // список констант
                  //MAX : integer = 100;  

type              // описание типов
                  //mass : array [1..MAX] of integer;

var               // описание переменных



begin             // начало программы

end.              // конец программы
#+END_SRC





для GNU GPL лицензии необходимо приложить полный текст лицензии
в виде отдельного файла
[[http://www.gnu.org/licenses/][COPYING]] (fixme)

Рекомендуемый заголовок файла:

#+BEGIN_SRC pascal
/*	
        proj_3_abc.pas -- Одна строчка для названия программы и краткого описания того, что программа делает.
        Copyright (C) <год первого опубликования произведения> <имя автора>

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+END_SRC


для BSD лицензии:

#+BEGIN_SRC pascal
/*
        proj_3_abc.pas -- Одна строчка для названия программы и краткого описания того, что программа делает.
        Copyright (C) <год первого опубликования произведения> <имя автора>

        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions
        are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in
        the documentation and/or other materials provided with the
        distribution.

        Neither the name of the <ORGANIZATION> nor the names of its
        contributors may be used to endorse or promote products derived
        from this software without specific prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
        CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
        INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
        MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
        BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
        TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
        TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
        THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        SUCH DAMAGE.

        — The BSD 3-Clause License
*/
#+END_SRC

* Список литературы

- А.В. Столяров [[http://www.stolyarov.info/books/programming_intro/vol1][Программирование: введение в профессию. Том 1: азы
  программирования]]
- Е.Р.Алексеев, О.В.Чеснокова, Т.В.Кучер [[http://www.altlinux.org/Books:FreePascal][Free Pascal и Lazarus:
  Учебник по программированию]] Библиотека ALT Linux   
- [[http://www.elettroshop.com/files/prodotti/download/mikroelektronica/pascal_syntax.pdf]]
  Quick Reference Guide for Pascal language</a> mikroElektronika
  SOFTWARE AND HARDWARE SOLUTIONS FOR THE EMBEDDED WORLD    
- [[http://ru.wikipedia.org/wiki/Pascal][Паскаль (язык программирования)]] Материал из Википедии — свободной
  энциклопедии    
- [[http://edunow.su/site/content/pascal/pascal_shpargalka][Шпаргалка по языку Pascal]]    
- [[http://www.freepascal.org/docs-html/][Документация Free Pascal]]
  
  
  
  
  
* Авторство
Copyright (C) 2014 Roman V. Prikhodchenko

Author: Roman V. Prikhodchenko [[chujoii@gmail.com]]
* Лицензия

[[CC_BY-SA_88x31.png]]

Руководство распространяется в соответствии с условиями
[[http://creativecommons.org/licenses/by-sa/3.0/][Attribution-ShareAlike]] (Атрибуция — С сохранением условий) CC BY-SA.
Копирование и распространение приветствуется.

